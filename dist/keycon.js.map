{"version":3,"file":"keycon.js","sources":["../src/KeyController.ts","../src/index.umd.ts"],"sourcesContent":["import Component from \"@egjs/component\";\nimport { names } from \"keycode\";\nimport { isString, isArray, addEvent, removeEvent } from \"@daybrush/utils\";\n\nconst codeData = {\n    \"+\": \"plus\",\n    \"left command\": \"meta\",\n    \"right command\": \"meta\",\n};\nconst keysSort = {\n    shift: 1,\n    ctrl: 2,\n    alt: 3,\n    meta: 4,\n};\n/**\n * @memberof KeyController\n */\nexport function getKey(keyCode: number): string {\n    let key = names[keyCode] || \"\";\n\n    for (const name in codeData) {\n        key = key.replace(name, codeData[name]);\n    }\n    return key.replace(/\\s/g, \"\");\n}\n\n/**\n * @memberof KeyController\n */\nexport function getCombi(e: KeyboardEvent, key: string = getKey(e.keyCode)): string[] {\n    const keys = [e.shiftKey && \"shift\", e.ctrlKey && \"ctrl\", e.altKey && \"alt\", e.metaKey && \"meta\"];\n    keys.indexOf(key) === -1 && keys.push(key);\n\n    return keys.filter(Boolean);\n}\n\nfunction getArrangeCombi(keys: string[]) {\n    const arrangeKeys = keys.slice();\n    arrangeKeys.sort((prev, next) => {\n        const prevScore = keysSort[prev] || 5;\n        const nextScore = keysSort[next] || 5;\n\n        return prevScore - nextScore;\n    });\n\n    return arrangeKeys;\n}\n/**\n * @typedef\n * @memberof KeyController\n */\nexport interface KeyControllerEvent {\n    inputEvent: KeyboardEvent;\n    isToggle: boolean;\n    key: string;\n    keyCode: number;\n    ctrlKey: boolean;\n    altKey: boolean;\n    shiftKey: boolean;\n    metaKey: boolean;\n}\nlet globalKeyController!: KeyController;\n\n/**\n */\nclass KeyController extends Component {\n    /**\n     */\n    public static get global() {\n        return globalKeyController || (globalKeyController = new KeyController());\n    }\n    public static setGlobal() {\n        return this.global;\n    }\n    /**\n     */\n    public ctrlKey = false;\n    /**\n     */\n    public altKey = false;\n    /**\n     *\n     */\n    public shiftKey = false;\n    /**\n     *\n     */\n    public metaKey = false;\n    /**\n     *\n     */\n    constructor(private container: Window | Document | HTMLElement = window) {\n        super();\n\n        addEvent(container, \"blur\", this.blur);\n        addEvent(container, \"keydown\", this.keydownEvent);\n        addEvent(container, \"keyup\", this.keyupEvent);\n    }\n    public clear = (): this => {\n        this.ctrlKey = false;\n        this.altKey = false;\n        this.shiftKey = false;\n        this.metaKey = false;\n        return this;\n    }\n    /**\n     *\n     */\n    public destroy() {\n        const container = this.container as any;\n\n        this.clear();\n        this.off();\n        removeEvent(container, \"blur\", this.blur);\n        removeEvent(container, \"keydown\", this.keydownEvent);\n        removeEvent(container, \"keyup\", this.keyupEvent);\n    }\n    public keydown(comb: string | string[], callback: (e: KeyControllerEvent) => void): this;\n    public keydown(callback: (e: KeyControllerEvent) => void): this;\n    /**\n     *\n     */\n    public keydown(\n        comb: string | string[] | ((e: KeyControllerEvent) => void),\n        callback?: (e: KeyControllerEvent) => void,\n    ): this {\n        return this.addEvent(\"keydown\", comb, callback);\n    }\n    public offKeydown(comb: string | string[], callback?: (e: KeyControllerEvent) => void): this;\n    public offKeydown(callback: (e: KeyControllerEvent) => void): this;\n    /**\n     *\n     */\n    public offKeydown(\n        comb: string | string[] | ((e: KeyControllerEvent) => void),\n        callback?: (e: KeyControllerEvent) => void,\n    ): this {\n        return this.removeEvent(\"keydown\", comb, callback);\n    }\n    public offKeyup(comb: string | string[], callback?: (e: KeyControllerEvent) => void): this;\n    public offKeyup(callback: (e: KeyControllerEvent) => void): this;\n    /**\n     *\n     */\n    public offKeyup(\n        comb: string | string[] | ((e: KeyControllerEvent) => void),\n        callback?: (e: KeyControllerEvent) => void,\n    ): this {\n        return this.removeEvent(\"keyup\", comb, callback);\n    }\n    public keyup(comb: string | string[], callback: (e: KeyControllerEvent) => void): this;\n    public keyup(callback: (e: KeyControllerEvent) => void): this;\n    /**\n     *\n     */\n    public keyup(\n        comb: string | string[] | ((e: KeyControllerEvent) => void),\n        callback?: (e: KeyControllerEvent) => void,\n    ): this {\n        return this.addEvent(\"keyup\", comb, callback);\n    }\n    private addEvent(\n        type: \"keydown\" | \"keyup\",\n        comb: string | string[] | ((e: KeyControllerEvent) => void),\n        callback?: (e: KeyControllerEvent) => void,\n    ) {\n        if (isArray(comb)) {\n            this.on(`${type}.${getArrangeCombi(comb).join(\".\")}`, callback);\n        } else if (isString(comb)) {\n            this.on(`${type}.${comb}`, callback);\n        } else {\n            this.on(type, comb);\n        }\n        return this;\n    }\n    private removeEvent(\n        type: \"keydown\" | \"keyup\",\n        comb: string | string[] | ((e: KeyControllerEvent) => void) | undefined,\n        callback?: (e: KeyControllerEvent) => void,\n    ) {\n        if (isArray(comb)) {\n            this.off(`${type}.${getArrangeCombi(comb).join(\".\")}`, callback);\n        } else if (isString(comb)) {\n            this.off(`${type}.${comb}`, callback);\n        } else {\n            this.off(type, comb);\n        }\n        return this;\n    }\n    private triggerEvent(type: \"keydown\" | \"keyup\", e: KeyboardEvent) {\n        this.ctrlKey = e.ctrlKey;\n        this.shiftKey = e.shiftKey;\n        this.altKey = e.altKey;\n        this.metaKey = e.metaKey;\n\n        const key = getKey(e.keyCode);\n        const isToggle = key === \"ctrl\"\n            || key === \"shift\"\n            || key === \"meta\"\n            || key === \"alt\";\n        const param: KeyControllerEvent = {\n            key,\n            isToggle,\n            inputEvent: e,\n            keyCode: e.keyCode,\n            ctrlKey: e.ctrlKey,\n            altKey: e.altKey,\n            shiftKey: e.shiftKey,\n            metaKey: e.metaKey,\n        };\n        this.trigger(type, param);\n        this.trigger(`${type}.${key}`, param);\n\n        const combi = getCombi(e, key);\n\n        combi.length > 1 && this.trigger(`${type}.${combi.join(\".\")}`, param);\n    }\n    private keydownEvent = (e: KeyboardEvent) => {\n        this.triggerEvent(\"keydown\", e);\n    }\n    private keyupEvent = (e: KeyboardEvent) => {\n        this.triggerEvent(\"keyup\", e);\n    }\n    private blur = () => {\n        this.clear();\n        this.trigger(\"blur\");\n    }\n}\n\nexport default KeyController;\n","import keycon, { getKey, getCombi } from \"./KeyController\";\n\n(keycon as any).getKey = getKey;\n(keycon as any).getCombi = getCombi;\n\nexport default keycon;\n"],"names":["globalKeyController","codeData","keysSort","shift","ctrl","alt","meta","getKey","keyCode","key","names","name","replace","getCombi","e","keys","shiftKey","ctrlKey","altKey","metaKey","indexOf","push","filter","Boolean","getArrangeCombi","arrangeKeys","slice","sort","prev","next","container","_super","_this","triggerEvent","clear","trigger","addEvent","blur","keydownEvent","keyupEvent","tslib_1","Object","KeyController","this","global","off","removeEvent","comb","callback","type","isArray","on","join","isString","param","isToggle","inputEvent","combi","length","Component"],"mappings":"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"}